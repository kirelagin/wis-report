Основная идея: построить структуру данных, хранящую пары ключей-значений и быстро возвращающую все ключевые строки и связанные с ними данные в окрестности фиксированного раздела **ЧЕГО??** заданной строки. В качестве метрики используется обыкновенное расстояние Левенштейна, либо (ограниченное) расстояние Дамерау-Левенштейна[@wiki:damerau]. Структура данных реализована как _FB-trie_ на ключах, а для хранения данных, соответствующих ключу используется внешняя база данных.


Ограниченное расстояние Дамерау-Левенштейна
--------------------------------------------

_Ограниченное расстояние Дамерау-Левенштейна_ — это редакторское расстояние между двумя словами, включающее операции удаления, вставки, замены, и перестановки соседних букв при условии, что запрещены затрагивающие букву более одного раза операции[@boytsov]. Такая функция, строго говоря, метрикой не является (не всегда выполняется неравенство треугольника), но перестановки соседних букв составляют заметную долю от ошибок при вводе с помощью клавиатуры, и, в отличие от полного расстояния Дамерау-Левенштейна, известны способы эффективного вычисления.

Для его вычисления в нашей реализации используется классическое динамическое программирование, но алгоритм сильно оптимизирован средствами битовой арифметики, и написан с использованием явных объектов состояния, что облегчает backtracking **ЧТОА??** при обходе дерева.


FB-trie
--------

_FB-trie_ — это структура данных, состоящая из двух сжатых префиксных деревьев (trie): одного для ключей и другого для обернутых ключей[@boytsov; @mihov]. Она позволяет выполнять поиск ключей в окрестности с использованием техники _meet-in-the-middle_, когда искомое слово делится пополам и обе половины ищутся в дереве в окрестностях разного размера, дающих в сумме искомый.

В нашей реализации данная часть написана на языке C++, деревья создаются и хранятся непосредственно файлах, отображенных в память с помощью библиотеки _Boost.Interprocess_. Это позволяет быстро выполнять операции поиска, даже если индекс целиком не помещается в оперативной памяти.
